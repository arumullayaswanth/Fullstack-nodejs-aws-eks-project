// first version in frontend

pipeline {
    agent any // Use any available Jenkins agent to run this pipeline

    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs() // Clean up any files from previous builds in the Jenkins workspace
            }
        }

        stage('Checkout from Git') {
            steps {
                // Clone the 'master' branch of your GitHub repository
                git branch: 'master', url: 'https://github.com/arumullayaswanth/Fullstack-nodejs-aws-eks-project.git'
            }
        }

        stage("Docker Image Build") {
            steps {
                script {
                    // Change directory into the 'client' folder, which contains the frontend code
                    dir('Fullstack-nodejs-aws-eks-project/client') {
                        sh 'docker system prune -f' // Clean up unused Docker images/containers/networks/volumes
                        sh 'docker container prune -f' // Remove stopped containers
                        sh 'docker build -t frontend .' // Build Docker image for the frontend and tag it as 'frontend'
                    }
                }
            }
        }

        stage("ECR Image Pushing") {
            steps {
                script {
                    // Shell script to authenticate with AWS ECR and push Docker image
                    sh '''
                    aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 421954350274.dkr.ecr.us-east-1.amazonaws.com
                    docker tag frontend:latest 421954350274.dkr.ecr.us-east-1.amazonaws.com/frontend:${BUILD_NUMBER}
                    docker push 421954350274.dkr.ecr.us-east-1.amazonaws.com/frontend:${BUILD_NUMBER}
                    '''
                    // Steps:
                    // 1. Log in to AWS ECR using credentials from `aws ecr get-login-password`
                    // 2. Tag the image with your ECR repo and the Jenkins build number
                    // 3. Push the image to your ECR repository
                }
            }
        }

        stage('Update Deployment file') {
            environment {
                // Define environment variables for use in this stage
                GIT_REPO_NAME = "Fullstack-nodejs-aws-eks-project"
                GIT_USER_NAME = "arumullayaswanth"
            }
            steps {
                // Move into the 'kubernetes-files' directory
                dir('Fullstack-nodejs-aws-eks-project/kubernetes-files') {
                    // Use stored GitHub personal access token (PAT) credential
                    withCredentials([string(credentialsId: 'my-git-pattoken', variable: 'git_token')]) {
                        sh '''
                            git config user.email "Yaswanth.arumulla@gmail.com" // Set Git user email
                            git config user.name "arumullayaswanth" // Set Git user name

                            BUILD_NUMBER=${BUILD_NUMBER} // Capture Jenkins build number into a shell variable
                            echo $BUILD_NUMBER // Print the build number for logging

                            // Replace the image line in the YAML with the new image tag using sed
                            sed -i "s#image:.*#image: 421954350274.dkr.ecr.us-east-1.amazonaws.com/frontend:$BUILD_NUMBER#g" frontend-deploy-service.yaml

                            git add . // Stage the modified deployment file
                            git commit -m "Update deployment Image to version \${BUILD_NUMBER}" // Commit the change
                            // Push the commit back to GitHub using the PAT
                            git push https://${git_token}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:master
                        '''
                    }
                }
            }
        }
    }
}


































pipeline {
    agent any 
    tools {
        jdk 'jdk'
        nodejs 'nodejs'
    }
    environment  {
        SCANNER_HOME=tool 'sonar-scanner'
        AWS_ACCOUNT_ID = credentials('ACCOUNT_ID')
        AWS_ECR_REPO_NAME = credentials('ECR_REPO1')
        AWS_DEFAULT_REGION = 'us-east-1'
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/"
    }
    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/CloudTechDevOps/2nd10WeeksofCloudOps-main.git'
            }
        }
        stage('Sonarqube Analysis') {
            steps {
                dir('client') {
                    withSonarQubeEnv('sonar-server') {
                        sh ''' $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=three-tier-frontend \
                        -Dsonar.projectKey=three-tier-frontend '''
                    }
                }
            }
        }
        stage('Quality Check') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token' 
                }
            }
        }
        stage('Trivy File Scan') {
            steps {
                dir('client') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }
        stage("Docker Image Build") {
            steps {
                script {
                    dir('client') {
                            sh 'docker system prune -f'
                            sh 'docker container prune -f'
                            sh 'docker build -t ${AWS_ECR_REPO_NAME} .'
                    }
                }
            }
        }
        stage("ECR Image Pushing") {
            steps {
                script {
                        sh 'aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REPOSITORY_URI}'
                        sh 'docker tag ${AWS_ECR_REPO_NAME} ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}'
                        sh 'docker push ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}'
                }
            }
        }
        stage("TRIVY Image Scan") {
            steps {
                sh 'trivy image ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER} > trivyimage.txt' 
            }
        }
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/CloudTechDevOps/2nd10WeeksofCloudOps-main.git'
            }
        }
        stage('Update Deployment file') {
            environment {
                GIT_REPO_NAME = "2nd10WeeksofCloudOps-main"
                GIT_USER_NAME = "CloudTechDevOps"
            }
            steps {
                dir('kubernetes-files') {
                    withCredentials([string(credentialsId: 'my-git-pattoken', variable: 'git_token')]) {
                        sh '''
                            git config user.email "cloud87777@gmail.com"
                            git config user.name "CloudTechDevOps"
                            BUILD_NUMBER=${BUILD_NUMBER}
                            echo $BUILD_NUMBER
                            sed -i "s#image:.*#image: $REPOSITORY_URI$AWS_ECR_REPO_NAME:$BUILD_NUMBER#g" frontend-deploy-service.yaml
                            git add .
                            git commit -m "Update deployment Image to version \${BUILD_NUMBER}"
                            git push https://${git_token}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
        
                        '''
                    }
                }
            }
        }
    }
}
