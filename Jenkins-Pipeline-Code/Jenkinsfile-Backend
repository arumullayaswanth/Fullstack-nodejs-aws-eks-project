// first version

pipeline {
    agent any // Run the pipeline on any available agent

    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs() // Clears the workspace before starting the build (removes old files)
            }
        }

        stage('Checkout from Git') {
            steps {
                // Clones the 'master' branch of your GitHub repository
                git branch: 'master', url: 'https://github.com/arumullayaswanth/Fullstack-nodejs-aws-eks-project.git'
            }
        }

        stage("Docker Image Build") {
            steps {
                script {
                    // Navigate to 'backend' directory
                    dir('backend') {
                        sh 'docker system prune -f' // Removes unused Docker data (containers, images, etc.)
                        sh 'docker container prune -f' // Specifically removes all stopped containers
                        sh 'docker build -t backend .' // Builds Docker image with the tag 'backend' from Dockerfile in current dir
                    }
                }
            }
        }

        stage("ECR Image Pushing") {
            steps {
                script {
                    // Shell script block to login and push Docker image to AWS ECR
                    sh '''
                    aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 421954350274.dkr.ecr.us-east-1.amazonaws.com
                    docker tag backend:latest 421954350274.dkr.ecr.us-east-1.amazonaws.com/backend:${BUILD_NUMBER}
                    docker push 421954350274.dkr.ecr.us-east-1.amazonaws.com/backend:${BUILD_NUMBER}
                    '''
                    // Explanation:
                    // 1. Authenticate Docker to AWS ECR.
                    // 2. Tag the local image 'backend:latest' with the remote ECR repo name and Jenkins build number.
                    // 3. Push the image to ECR.
                }
            }
        }

        stage('Update Deployment file') {
            environment {
                // Set environment variables for Git repo name and user name
                GIT_REPO_NAME = "Fullstack-nodejs-aws-eks-project"
                GIT_USER_NAME = "arumullayaswanth"
            }
            steps {
                // Navigate into 'kubernetes-files' directory
                dir('kubernetes-files') {
                    // Use GitHub personal access token credentials
                    withCredentials([string(credentialsId: 'my-git-pattoken', variable: 'git_token')]) {
                        // Shell script to update Kubernetes deployment file
                        sh '''
                            # Set Git user email for committing
                            git config user.email "Yaswanth.arumulla@gmail.com"
                        
                            # Set Git user name for committing
                            git config user.name "arumullayaswanth"
                        
                            # Capture Jenkins build number into a shell variable
                            BUILD_NUMBER=${BUILD_NUMBER}
                        
                            # Print the build number (for debugging/logging)
                            echo $BUILD_NUMBER
                        
                            # Replace the image line in the YAML with the new image tag using sed
                            sed -i "s#image:.*#image: 421954350274.dkr.ecr.us-east-1.amazonaws.com/backend::$BUILD_NUMBER#g" backend-deployment.yaml
                        
                            # Stage the modified deployment file for commit
                            git add .
                        
                            # Commit the change with a message including the build number
                            git commit -m "Update deployment Image to version ${BUILD_NUMBER}"
                        
                            # Push the commit back to GitHub using the stored personal access token (PAT)
                            git push https://${git_token}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:master
                        '''
                    }
                }
            }
        }
    }
}





























pipeline {
    agent any 
    tools {
        jdk 'jdk'
        nodejs 'nodejs'
    }
    environment  {
        SCANNER_HOME=tool 'sonar-scanner'
        AWS_ACCOUNT_ID = credentials('ACCOUNT_ID')
        AWS_ECR_REPO_NAME = credentials('ECR_REPO2')
        AWS_DEFAULT_REGION = 'us-east-1'
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/"
    }
    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/CloudTechDevOps/2nd10WeeksofCloudOps-main.git'
            }
        }
        stage('Sonarqube Analysis') {
            steps {
                dir('backend') {
                    withSonarQubeEnv('sonar-server') {
                        sh ''' $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=three-tier-backend \
                        -Dsonar.projectKey=three-tier-backend '''
                    }
                }
            }
        }
        stage('Quality Check') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token' 
                }
            }
        }
        stage('Trivy File Scan') {
            steps {
                dir('backend') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }
        stage("Docker Image Build") {
            steps {
                script {
                    dir('backend') {
                            sh 'docker system prune -f'
                            sh 'docker container prune -f'
                            sh 'docker build -t ${AWS_ECR_REPO_NAME} .'
                    }
                }
            }
        }
        stage("ECR Image Pushing") {
            steps {
                script {
                        sh 'aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REPOSITORY_URI}'
                        sh 'docker tag ${AWS_ECR_REPO_NAME} ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}'
                        sh 'docker push ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}'
                }
            }
        }
        stage("TRIVY Image Scan") {
            steps {
                sh 'trivy image ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER} > trivyimage.txt' 
            }
        }
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/CloudTechDevOps/2nd10WeeksofCloudOps-main.git'
            }
        }
        stage('Update Deployment file') {
            environment {
                GIT_REPO_NAME = "2nd10WeeksofCloudOps-main"
                GIT_USER_NAME = "CloudTechDevOps"
            }
            steps {
                dir('kubernetes-files') {
                    withCredentials([string(credentialsId: 'my-git-pattoken', variable: 'git_token')]) {
                        sh '''
                            git config user.email "cloud87777@gmail.com"
                            git config user.name "CloudTechDevOps"
                            BUILD_NUMBER=${BUILD_NUMBER}
                            echo $BUILD_NUMBER
                            sed -i "s#image:.*#image: $REPOSITORY_URI$AWS_ECR_REPO_NAME:$BUILD_NUMBER#g" backend-deployment.yaml
                            git add .
                            git commit -m "Update deployment Image to version \${BUILD_NUMBER}"
                            git push https://${git_token}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                        '''
                    }
                }
            }
        }
    }
}
